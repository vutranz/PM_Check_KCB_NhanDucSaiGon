package com.thecode.WebSite_CHECK_XML.Controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import com.thecode.WebSite_CHECK_XML.Model.application.BacSi;
import com.thecode.WebSite_CHECK_XML.Model.application.DichVuKyThuat;
import com.thecode.WebSite_CHECK_XML.Model.application.ErrorKCBDetail;
import com.thecode.WebSite_CHECK_XML.Model.application.ErrorKCBGroup;
import com.thecode.WebSite_CHECK_XML.Model.application.HoSoYTe;
import com.thecode.WebSite_CHECK_XML.Model.application.XML2;
import com.thecode.WebSite_CHECK_XML.Model.application.XML3;
import com.thecode.WebSite_CHECK_XML.Service.BacSi_data;


import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Duration;

public class Check_Error_KCB {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");


    // ----b·ªè d·∫•u c√°ch ƒë·∫ßu v√† cu·ªëi c·ªßa d·ªØ li·ªáu
    private static String norm(String s) {
        return s == null ? null : s.trim();
    }

    private static BacSi findBacSiById(List<BacSi> ds, String id) {
        if (id == null) return null;
        String nid = norm(id);
        for (BacSi b : ds) {
            String bid = norm(b.getMaBS());
            if (bid != null && bid.equals(nid)) return b;
        }
        return null;
    }


// =============================================
// üîç PH√ÅT HI·ªÜN B√ÅC Sƒ® CH·ªà ƒê·ªäNH / TH·ª∞C HI·ªÜN TR√ôNG GI·ªú
// =============================================
private static final Map<String, Map<String, Set<String>>> GLOBAL_YL_MAP = new HashMap<>();
private static final Map<String, Map<String, Set<String>>> GLOBAL_THYL_MAP = new HashMap<>();

private static void checkBacSiChiDinhTrungGio(HoSoYTe hs, ErrorKCBGroup group) {
    if (hs == null || hs.getDsCLS() == null || hs.getDsCLS().isEmpty()) return;

    List<XML3> dsCLS = hs.getDsCLS();
    String maLK = norm(hs.getMaLk());

    // üî∏ B·ªè qua b√°c sƒ© ƒë·∫∑c bi·ªát
    final String BS_BO_QUA = "008003/BD-CCHN";

    // üîπ Ghi nh·∫≠n gi·ªù YL v√† THYL to√†n c·ª•c
    for (XML3 xml3 : dsCLS) {
        if (xml3 == null) continue;

        String bsCD = norm(xml3.getMaBacSi());
        String gioYL = norm(xml3.getNgayYl());
        String bsTH = norm(xml3.getNguoiThucHien());
        String gioTHYL = norm(xml3.getNgayThYl());

        // B·ªè qua b√°c sƒ© ƒë·∫∑c bi·ªát
        if (BS_BO_QUA.equalsIgnoreCase(bsCD) || BS_BO_QUA.equalsIgnoreCase(bsTH)) continue;

        if (bsCD != null && gioYL != null && gioYL.matches("\\d{12}")) {
            GLOBAL_YL_MAP
                .computeIfAbsent(bsCD, k -> new HashMap<>())
                .computeIfAbsent(gioYL, k -> new HashSet<>())
                .add(maLK);
        }

        if (bsTH != null && gioTHYL != null && gioTHYL.matches("\\d{12}")) {
            GLOBAL_THYL_MAP
                .computeIfAbsent(bsTH, k -> new HashMap<>())
                .computeIfAbsent(gioTHYL, k -> new HashSet<>())
                .add(maLK);
        }
    }

    // üîπ In b√°o c√°o g·ªçn g√†ng cho YL tr√πng
    for (Map.Entry<String, Map<String, Set<String>>> entryBS : GLOBAL_YL_MAP.entrySet()) {
        String bs = entryBS.getKey();
        if (BS_BO_QUA.equalsIgnoreCase(bs)) continue;

        Map<String, Set<String>> gioMap = entryBS.getValue();
        boolean hasDup = gioMap.values().stream().anyMatch(set -> set.size() > 1);
        if (!hasDup) continue;

        System.out.println("\n[YL-TRUNG] BS ch·ªâ ƒë·ªãnh " + bs + " c√≥ h·ªì s∆° tr√πng gi·ªù:");
        gioMap.forEach((gio, lkSet) -> {
            if (lkSet.size() > 1) {
                System.out.println("   - Gi·ªù " + gio + ": " + String.join(", ", lkSet));
            }
        });
    }

    // üîπ In b√°o c√°o g·ªçn g√†ng cho THYL tr√πng
    for (Map.Entry<String, Map<String, Set<String>>> entryBS : GLOBAL_THYL_MAP.entrySet()) {
        String bs = entryBS.getKey();
        if (BS_BO_QUA.equalsIgnoreCase(bs)) continue;

        Map<String, Set<String>> gioMap = entryBS.getValue();
        boolean hasDup = gioMap.values().stream().anyMatch(set -> set.size() > 1);
        if (!hasDup) continue;

        System.out.println("\n[THYL-TRUNG] BS th·ª±c hi·ªán " + bs + " c√≥ h·ªì s∆° tr√πng gi·ªù:");
        gioMap.forEach((gio, lkSet) -> {
            if (lkSet.size() > 1) {
                System.out.println("   - Gi·ªù " + gio + ": " + String.join(", ", lkSet));
            }
        });
    }
}










    private static void checkThuocSauKQ(HoSoYTe hs, ErrorKCBGroup group) {
    DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
    DateTimeFormatter displayFmt = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

    // T√¨m th·ªùi gian KQ l·ªõn nh·∫•t c·ªßa h·ªì s∆° (d·ªãch v·ª• k·ªπ thu·∫≠t cu·ªëi c√πng)
    Optional<LocalDateTime> maxKQ = hs.getDsCLS().stream()
            .filter(x -> x.getNgayKq() != null)
            .map(x -> LocalDateTime.parse(x.getNgayKq(), fmt))
            .max(LocalDateTime::compareTo);

    if (maxKQ.isEmpty()) return; // kh√¥ng c√≥ KQ th√¨ b·ªè qua

    for (XML2 thuoc : hs.getDsThuoc()) {
        try {
            if (thuoc.getNgayYl() == null) continue;

            LocalDateTime timeThuoc = LocalDateTime.parse(thuoc.getNgayYl(), fmt);
            if (timeThuoc.isBefore(maxKQ.get())) {
                ErrorKCBDetail detail = new ErrorKCBDetail();
                detail.setMaLk(hs.getMaLk());
                detail.setMaBn(hs.getMaBN());
                detail.setMaDichVu(thuoc.getMaThuoc());
                detail.setMaBsCƒê(thuoc.getMaBacSi());
                detail.setMaBsTH(thuoc.getMaBacSi());
                detail.setTenDichVu(thuoc.getTenThuoc());
                detail.setNgayYL(thuoc.getNgayYl());

                String thuocTimeStr = timeThuoc.format(displayFmt);
                String kqTimeStr = maxKQ.get().format(displayFmt);

                detail.setErrorDetail(
                    "‚õî Th·ªùi gian k√™ thu·ªëc (" + thuocTimeStr +
                    ") ph·∫£i sau khi c√≥ k·∫øt qu·∫£ DVKT (" + kqTimeStr + ")"
                );
                group.addError(detail);
            }
        } catch (Exception e) {
            // Ghi log n·∫øu c·∫ßn, v√≠ d·ª•: e.printStackTrace();
        }
    }
}



    // ------------------- NEW: h√†m ki·ªÉm tra th·ªùi gian -------------------
   
   public static void checkThoiGianDongBo(List<XML3> dsCLS, String maLK, ErrorKCBGroup group) {
    if (dsCLS == null || dsCLS.isEmpty()) return;

    Set<String> skipSet = Set.of("02.03", "03.18", "10.19");

    List<XML3> validCLS = dsCLS.stream()
            .filter(xml3 -> !skipSet.contains(norm(xml3.getMaDichVu())))
            .collect(Collectors.toList());

    if (validCLS.isEmpty()) return;

    String firstNgayYL = validCLS.get(0).getNgayYl();
    String firstThYl = validCLS.get(0).getNgayThYl();

    for (XML3 xml3 : validCLS) {
        // check NgayYL
        if (xml3.getNgayYl() != null && !xml3.getNgayYl().equals(firstNgayYL)) {
            ErrorKCBDetail detail = new ErrorKCBDetail();
            detail.setMaLk(maLK);
            detail.setMaBsCƒê(xml3.getMaBacSi());
            detail.setTenDichVu(xml3.getTenDichVu());
            detail.setMaBsTH(xml3.getNguoiThucHien());
            detail.setMaDichVu(xml3.getMaDichVu());
            detail.setNgayYL(xml3.getNgayYl());
            detail.setNgayTHYL(xml3.getNgayThYl());
            detail.setNgaykq(xml3.getNgayKq());
            detail.setErrorDetail("Th·ªùi gian YL kh√¥ng ƒë·ªìng b·ªô trong h·ªì s∆°");
            group.addError(detail);
        }

        // check NgayTHYL
        if (xml3.getNgayThYl() != null && !xml3.getNgayThYl().equals(firstThYl)) {
            ErrorKCBDetail detail = new ErrorKCBDetail();
            detail.setMaLk(maLK);
            detail.setMaDichVu(xml3.getMaDichVu());
            detail.setTenDichVu(xml3.getTenDichVu());
            detail.setMaBsCƒê(xml3.getMaBacSi());
            detail.setMaBsTH(xml3.getNguoiThucHien());
            detail.setNgayYL(xml3.getNgayYl());
            detail.setNgayTHYL(xml3.getNgayThYl());
            detail.setNgaykq(xml3.getNgayKq());
            detail.setErrorDetail("Th·ªùi gian THYL kh√¥ng ƒë·ªìng b·ªô trong h·ªì s∆°");
            group.addError(detail);
        }
    }
}



private static void checkThoiGian(XML3 xml3, DichVuKyThuat allowed, String maLK, ErrorKCBGroup group) {
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
        try {
          
            if (xml3.getNgayThYl() != null && xml3.getNgayKq() != null) {
                LocalDateTime yl = LocalDateTime.parse(xml3.getNgayThYl(), fmt);
                LocalDateTime kq = LocalDateTime.parse(xml3.getNgayKq(), fmt);
                long diffMinutes = Duration.between(yl, kq).toMinutes();

                if (diffMinutes < allowed.getThoiGianToiThieu() || diffMinutes > allowed.getThoiGianToiDa()) {
                    ErrorKCBDetail detail = new ErrorKCBDetail();
                    detail.setMaLk(maLK);
                    detail.setMaDichVu(xml3.getMaDichVu());
                    //detail.setMaBn(xml3.getMaBN());
                    detail.setTenDichVu(xml3.getTenDichVu());
                    detail.setNgayYL(xml3.getNgayYl());
                    detail.setNgayTHYL(xml3.getNgayThYl());
                    detail.setNgaykq(xml3.getNgayKq());
                    detail.setMaBsCƒê(xml3.getMaBacSi());
                    detail.setMaBsTH(xml3.getNguoiThucHien());
                    detail.setErrorDetail("Th·ªùi gian DV " + allowed.getTenDV()
                            + " l·ªách " + diffMinutes + "p, chu·∫©n " + allowed.getThoiGianToiThieu() + "-" + allowed.getThoiGianToiDa());
                    group.addError(detail);
                }
            }
        } catch (Exception e) {
            // ErrorKCBDetail detail = new ErrorKCBDetail();
            // detail.setMaLk(maLK);
            // detail.setMaDichVu(xml3.getMaDichVu());
            // detail.setMaBsCƒê(xml3.getMaBacSi());
            // detail.setMaBsTH(xml3.getMaBacSi());
            // //detail.setErrorDetail("L·ªói x·ª≠ l√Ω th·ªùi gian DV " + xml3.getMaDichVu() + " (kh√¥ng parse ƒë∆∞·ª£c ho·∫∑c d·ªØ li·ªáu thi·∫øu)");
            // group.addError(detail);
        }
    }
    

    // -------------------------------------------------------------------

public static List<ErrorKCBGroup> ErrorKCB(List<HoSoYTe> hsytList) {
    List<ErrorKCBGroup> groupedErrors = new ArrayList<>();
    Set<String> khoaChinhSet = Set.of("02.03", "03.18", "10.19"); 
    List<BacSi> dsBacSi = BacSi_data.getDsBacSi();

    for (HoSoYTe hs : hsytList) {
        String maLK = hs.getMaLk();
        ErrorKCBGroup group = new ErrorKCBGroup(maLK);

        // üîπ 1. T√¨m d·ªãch v·ª• ch√≠nh trong h·ªì s∆°
        XML3 dvChinh = hs.getDsCLS().stream()
                .filter(x -> khoaChinhSet.contains(norm(x.getMaDichVu())))
                .findFirst()
                .orElse(null);
        if (dvChinh == null) continue;
        if ("08.19".equals(norm(dvChinh.getMaDichVu()))) continue;

        // üîπ 1.1 Ki·ªÉm tra b√°c sƒ© ch√≠nh ph·∫£i tr√πng v·ªõi ng∆∞·ªùi th·ª±c hi·ªán
        String bsChiDinh = norm(dvChinh.getMaBacSi());
        String bsThucHien = norm(dvChinh.getNguoiThucHien());

        if (bsChiDinh == null || bsThucHien == null || !bsChiDinh.equals(bsThucHien)) {
            ErrorKCBDetail detail = new ErrorKCBDetail();
            detail.setMaLk(hs.getMaLk());
            detail.setMaBn(hs.getMaBN());
            detail.setMaDichVu(dvChinh.getMaDichVu());
            detail.setTenDichVu(dvChinh.getTenDichVu());
            detail.setMaBsCƒê(bsChiDinh);
            detail.setMaBsTH(bsThucHien);
            detail.setErrorDetail("B√°c sƒ© ch·ªâ ƒë·ªãnh v√† th·ª±c hi·ªán d·ªãch v·ª• ch√≠nh ph·∫£i tr√πng nhau");
            group.addError(detail);
        }

        String bsChinh = norm(dvChinh.getMaBacSi());

        // üîπ 2. Duy·ªát t·ª´ng d·ªãch v·ª• k·ªπ thu·∫≠t trong h·ªì s∆°
        for (XML3 xml3 : hs.getDsCLS()) {

            // ‚úÖ Ki·ªÉm tra thi·∫øu b√°c sƒ© ch·ªâ ƒë·ªãnh ho·∫∑c th·ª±c hi·ªán
            if ((xml3.getMaBacSi() == null || xml3.getMaBacSi().isBlank()) ||
                (xml3.getNguoiThucHien() == null || xml3.getNguoiThucHien().isBlank())) {

                ErrorKCBDetail detail = new ErrorKCBDetail();
                detail.setMaLk(maLK);
                detail.setMaBn(hs.getMaBN());
                detail.setMaDichVu(xml3.getMaDichVu());
                detail.setTenDichVu(xml3.getTenDichVu());
                detail.setNgayYL(xml3.getNgayYl());
                detail.setNgayTHYL(xml3.getNgayThYl());
                detail.setNgaykq(xml3.getNgayKq());

                if (xml3.getMaBacSi() == null || xml3.getMaBacSi().isBlank()) {
                    detail.setErrorDetail("Thi·∫øu b√°c sƒ© ch·ªâ ƒë·ªãnh");
                } else {
                    detail.setErrorDetail("Thi·∫øu b√°c sƒ© th·ª±c hi·ªán");
                }

                group.addError(detail);
                continue; // b·ªè qua d·ªãch v·ª• n√†y n·∫øu thi·∫øu th√¥ng tin b√°c sƒ©
            }

            // üîπ Chu·∫©n h√≥a th√¥ng tin b√°c sƒ©
            String maBS = norm(xml3.getMaBacSi());
            String maNguoiThucHien = norm(xml3.getNguoiThucHien());
            String idToCheck = maNguoiThucHien != null ? maNguoiThucHien : maBS;

            // üîπ 3. Ki·ªÉm tra BS ch·ªâ ƒë·ªãnh c√≥ kh·ªõp v·ªõi BS ch√≠nh kh√¥ng
            if (bsChinh != null && (maBS == null || !maBS.equals(bsChinh))) {
                ErrorKCBDetail detail = new ErrorKCBDetail();
                detail.setMaLk(maLK);
                detail.setMaBn(hs.getMaBN());
                detail.setMaDichVu(xml3.getMaDichVu());
                detail.setMaBsCƒê(bsChinh);
                detail.setMaBsTH(maBS);
                detail.setNgayYL(xml3.getNgayYl());
                detail.setNgayTHYL(xml3.getNgayThYl());
                detail.setNgaykq(xml3.getNgayKq());
                detail.setErrorDetail("BS ch·ªâ ƒë·ªãnh kh√¥ng kh·ªõp v·ªõi BS ch√≠nh");
                group.addError(detail);
            }

            // üîπ 4. Ki·ªÉm tra xem b√°c sƒ© th·ª±c hi·ªán c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
            BacSi performer = findBacSiById(dsBacSi, idToCheck);
            if (performer == null) {
                ErrorKCBDetail detail = new ErrorKCBDetail();
                detail.setMaLk(maLK);
                detail.setMaBn(hs.getMaBN());
                detail.setMaDichVu(xml3.getMaDichVu());
                detail.setMaBsTH(idToCheck);
                detail.setNgayYL(xml3.getNgayYl());
                detail.setNgayTHYL(xml3.getNgayThYl());
                detail.setNgaykq(xml3.getNgayKq());
                detail.setErrorDetail("Kh√¥ng t√¨m th·∫•y b√°c sƒ© th·ª±c hi·ªán");
                group.addError(detail);
                continue;
            }
            
            checkGioLamViec(performer, xml3, hs, "ch·ªâ ƒë·ªãnh", group);
            checkGioLamViec(performer, xml3, hs, "th·ª±c hi·ªán", group);

            // üîπ 5. Ki·ªÉm tra chuy√™n m√¥n c·ªßa b√°c sƒ© v·ªõi d·ªãch v·ª•
            DichVuKyThuat allowed = performer.getDsDichVuDuocPhep().stream()
                    .filter(d -> norm(d.getMaDV()).equals(norm(xml3.getMaDichVu())))
                    .findFirst()
                    .orElse(null);

            if (allowed == null) {
                ErrorKCBDetail detail = new ErrorKCBDetail();
                detail.setMaLk(maLK);
                detail.setMaBn(hs.getMaBN());
                detail.setMaDichVu(xml3.getMaDichVu());
                detail.setTenDichVu(xml3.getTenDichVu());
                detail.setNgayYL(xml3.getNgayYl());
                detail.setNgayTHYL(xml3.getNgayThYl());
                detail.setNgaykq(xml3.getNgayKq());
                detail.setMaBsCƒê(xml3.getMaBacSi());
                detail.setMaBsTH(idToCheck);
                detail.setErrorDetail("B√°c sƒ© kh√¥ng c√≥ chuy√™n m√¥n l√†m DV n√†y");
                group.addError(detail);
                continue;
            }

            // üîπ 6. Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá c·ªßa t·ª´ng d·ªãch v·ª•
            checkThoiGian(xml3, allowed, maLK, group);
        }

        // üîπ 7. Ki·ªÉm tra ƒë·ªìng b·ªô th·ªùi gian gi·ªØa c√°c d·ªãch v·ª• & thu·ªëc
        checkThoiGianDongBo(hs.getDsCLS(), maLK, group);
        checkThuocSauKQ(hs, group);
        checkBacSiChiDinhTrungGio(hs, group); // c√≥ th·ªÉ b·∫≠t l·∫°i sau n·∫øu c·∫ßn

        // üîπ 8. N·∫øu h·ªì s∆° c√≥ l·ªói th√¨ th√™m v√†o danh s√°ch k·∫øt qu·∫£
        if (!group.getErrors().isEmpty()) {
            groupedErrors.add(group);
        }
    }

    return groupedErrors;
}


private static void checkGioLamViec(BacSi bs, XML3 xml3, HoSoYTe hs, String loai, ErrorKCBGroup group) {
    if (bs == null || xml3 == null || hs == null) return;

    String timeStr = loai.equalsIgnoreCase("ch·ªâ ƒë·ªãnh") ? xml3.getNgayYl() : xml3.getNgayThYl();
    if (timeStr == null || !timeStr.matches("\\d{12}")) return;

    try {
        LocalDateTime thoiGian = LocalDateTime.parse(timeStr, DateTimeFormatter.ofPattern("yyyyMMddHHmm"));
        if (!bs.trongGioLam(thoiGian)) {
            ErrorKCBDetail detail = new ErrorKCBDetail();
            detail.setMaLk(hs.getMaLk());
            detail.setMaBn(hs.getMaBN());
            detail.setMaDichVu(xml3.getMaDichVu());
            detail.setTenDichVu(xml3.getTenDichVu());
            detail.setNgayYL(xml3.getNgayYl());
            detail.setNgayTHYL(xml3.getNgayThYl());
            detail.setNgaykq(xml3.getNgayKq());
            detail.setMaBsCƒê(xml3.getMaBacSi());
            detail.setMaBsTH(bs.getMaBS());
            detail.setErrorDetail("‚õî B√°c sƒ© " + bs.getHoTenBS() + " ngh·ªâ T7, kh√¥ng l√†m vi·ªác v√†o " + loai + ": " + timeStr);
            group.addError(detail);
        }
    } catch (Exception e) {
        // B·ªè qua l·ªói parse, tr√°nh d·ª´ng to√†n b·ªô ki·ªÉm tra
    }
}




}





    

   




